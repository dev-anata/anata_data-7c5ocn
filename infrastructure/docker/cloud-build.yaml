# Cloud Build configuration for Pharmaceutical Data Pipeline Platform
# Version: 1.0.0
# Implements comprehensive build pipeline with enhanced security controls

timeout: 1200s
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: N1_HIGHCPU_8
  diskSizeGb: '100'
  env:
    - 'DOCKER_BUILDKIT=1'
    - 'BUILDKIT_PROGRESS=plain'
  dynamic_substitutions: true

steps:
  # Step 1: Install and validate dependencies
  - name: 'python:3.9-slim'
    id: 'install-dependencies'
    entrypoint: pip
    args:
      - 'install'
      - '-r'
      - 'requirements.txt'
      - '--require-hashes'
    timeout: '300s'

  # Step 2: Execute comprehensive test suite
  - name: 'python:3.9-slim'
    id: 'run-tests'
    entrypoint: python
    args:
      - '-m'
      - 'pytest'
      - '--cov=.'
      - '--cov-report=xml'
      - '--cov-report=html'
      - '--junitxml=test-results/junit.xml'
      - '--cov-fail-under=80'
    timeout: '300s'

  # Step 3: Security scanning
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'security-scan'
    args:
      - 'beta'
      - 'container'
      - 'security'
      - '--scan-type=vulnerability,license'
      - '--format=json'
      - '--severity-threshold=MEDIUM'
      - '.'
    timeout: '300s'

  # Step 4: Container vulnerability scanning
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'container-scan'
    args:
      - 'container'
      - 'scan'
      - '--format=json'
      - '--report-path=/workspace/security-scan/container-scan.json'
      - 'gcr.io/${PROJECT_ID}/pharma-pipeline-backend:${COMMIT_SHA}'
    timeout: '300s'

  # Step 5: Build optimized container image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-container'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/pharma-pipeline-backend:${COMMIT_SHA}'
      - '--build-arg'
      - 'BUILD_VERSION=${COMMIT_SHA}'
      - '--build-arg'
      - 'BUILD_DATE=${_BUILD_DATE}'
      - '--no-cache'
      - '--security-opt'
      - 'no-new-privileges'
      - '-f'
      - 'src/backend/Dockerfile'
      - '.'
    timeout: '600s'

  # Step 6: Verify image size
  - name: 'gcr.io/cloud-builders/docker'
    id: 'verify-size'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SIZE=$(docker image inspect gcr.io/${PROJECT_ID}/pharma-pipeline-backend:${COMMIT_SHA} --format='{{.Size}}')
        MAX_SIZE=524288000  # 500MB in bytes
        if [ "$SIZE" -gt "$MAX_SIZE" ]; then
          echo "Error: Image size exceeds 500MB limit"
          exit 1
        fi
    timeout: '60s'

  # Step 7: Push container image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/pharma-pipeline-backend:${COMMIT_SHA}'
    timeout: '300s'

  # Step 8: Generate deployment manifests
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'generate-manifests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        sed -i "s|IMAGE_TAG|${COMMIT_SHA}|g" infrastructure/docker/cloud-deploy.yaml
    timeout: '60s'

artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-artifacts'
    paths:
      - '/workspace/test-results/**/*'
      - '/workspace/coverage/**/*'
      - '/workspace/security-scan/**/*'

images:
  - 'gcr.io/${PROJECT_ID}/pharma-pipeline-backend:${COMMIT_SHA}'

substitutions:
  _BUILD_DATE: '${_BUILD_DATE}'

tags:
  - 'pharma-pipeline'
  - '${BRANCH_NAME}'
  - '${COMMIT_SHA}'

availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/docker-registry-key/versions/latest
      env: 'DOCKER_REGISTRY_KEY'

options:
  requestedVerifyOption: VERIFIED
  sanitizedLogging: true