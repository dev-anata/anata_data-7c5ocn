name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '16.x'
  CONTAINER_SIZE_LIMIT: '500MB'
  TEST_TIMEOUT: '5'
  BUILD_TIMEOUT: '10'

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.TEST_TIMEOUT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm audit fix

      - name: Run linting
        run: npm run lint
        
      - name: Run unit tests
        run: npm run test:ci
        
      - name: Check test coverage
        run: |
          npm run test:coverage
          if [ $(jq -r '.total.lines.pct' coverage/coverage-summary.json) -lt 80 ]; then
            echo "Test coverage is below 80%"
            exit 1
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 14

  security-scan:
    name: Security Analysis
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          queries: security-extended,security-and-quality

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

      - name: Run dependency vulnerability scan
        run: |
          npm audit --production --audit-level=high
          if [ $? -ne 0 ]; then
            echo "High severity vulnerabilities found"
            exit 1
          fi

  build:
    name: Build and Scan Container
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.BUILD_TIMEOUT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          buildkitd-flags: --debug

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./src/backend/Dockerfile
          push: false
          tags: pharma-pipeline:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Check image size
        run: |
          IMAGE_SIZE=$(docker image ls pharma-pipeline:${{ github.sha }} --format "{{.Size}}")
          if [ $(echo $IMAGE_SIZE | sed 's/MB//') -gt $(echo $CONTAINER_SIZE_LIMIT | sed 's/MB//') ]; then
            echo "Container size exceeds limit of $CONTAINER_SIZE_LIMIT"
            exit 1
          fi

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: pharma-pipeline:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  notify:
    name: Send Notifications
    needs: [test, security-scan, build]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()