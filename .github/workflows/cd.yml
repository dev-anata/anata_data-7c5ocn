name: Continuous Deployment
on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main, develop]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  MONITORING_KEY: ${{ secrets.MONITORING_KEY }}

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      deploy_environment: ${{ steps.set-env.outputs.environment }}
      image_tag: ${{ steps.set-env.outputs.image_tag }}
    steps:
      - name: Set deployment environment
        id: set-env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/develop' ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
          echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  authenticate-gcp:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 363.0.0'
          project_id: ${{ env.GCP_PROJECT_ID }}

  deploy-development:
    needs: [prepare-deployment, authenticate-gcp]
    if: needs.prepare-deployment.outputs.deploy_environment == 'development'
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://dev-api.pharma-pipeline.example.com
    steps:
      - name: Deploy to Development
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: pharma-pipeline-backend-dev
          image: gcr.io/${{ env.GCP_PROJECT_ID }}/pharma-pipeline-backend:${{ needs.prepare-deployment.outputs.image_tag }}
          region: ${{ env.GCP_REGION }}
          flags: --port=8080 --memory=2Gi --cpu=2 --min-instances=1 --max-instances=10
          
      - name: Verify Deployment Health
        run: |
          gcloud run services describe pharma-pipeline-backend-dev \
            --region=${{ env.GCP_REGION }} \
            --format='get(status.conditions[0].status)'

  deploy-staging:
    needs: [prepare-deployment, authenticate-gcp]
    if: needs.prepare-deployment.outputs.deploy_environment == 'staging'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging-api.pharma-pipeline.example.com
    steps:
      - name: Deploy to Staging (Blue-Green)
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: pharma-pipeline-backend-staging
          image: gcr.io/${{ env.GCP_PROJECT_ID }}/pharma-pipeline-backend:${{ needs.prepare-deployment.outputs.image_tag }}
          region: ${{ env.GCP_REGION }}
          flags: |
            --port=8080
            --memory=4Gi
            --cpu=2
            --min-instances=2
            --max-instances=20
            --tag=blue
            
      - name: Health Check Blue Environment
        run: |
          endpoint="https://blue---pharma-pipeline-backend-staging-${HASH}.a.run.app"
          for i in {1..3}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" $endpoint/health)
            if [ "$response" != "200" ]; then
              echo "Health check failed"
              exit 1
            fi
            sleep 10
          done

      - name: Traffic Migration
        if: success()
        run: |
          gcloud run services update-traffic pharma-pipeline-backend-staging \
            --region=${{ env.GCP_REGION }} \
            --to-tags=blue=100

      - name: Rollback on Failure
        if: failure()
        run: |
          gcloud run services update-traffic pharma-pipeline-backend-staging \
            --region=${{ env.GCP_REGION }} \
            --to-revisions=PREVIOUS=100

  deploy-production:
    needs: [prepare-deployment, authenticate-gcp]
    if: needs.prepare-deployment.outputs.deploy_environment == 'production'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.pharma-pipeline.example.com
    steps:
      - name: Initialize Deployment Monitoring
        run: |
          gcloud monitoring channels create \
            --display-name="CD Pipeline Alerts" \
            --type=email \
            --email-address=platform-alerts@company.com

      - name: Progressive Deployment to Production
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: pharma-pipeline-backend-prod
          image: gcr.io/${{ env.GCP_PROJECT_ID }}/pharma-pipeline-backend:${{ needs.prepare-deployment.outputs.image_tag }}
          region: ${{ env.GCP_REGION }}
          flags: |
            --port=8080
            --memory=8Gi
            --cpu=4
            --min-instances=3
            --max-instances=30
            --tag=prod-${{ needs.prepare-deployment.outputs.image_tag }}

      - name: Progressive Traffic Migration
        run: |
          # Initial 5% traffic
          gcloud run services update-traffic pharma-pipeline-backend-prod \
            --region=${{ env.GCP_REGION }} \
            --to-tags=prod-${{ needs.prepare-deployment.outputs.image_tag }}=5
          
          # Monitor health metrics
          for percentage in 20 50 100; do
            sleep 600  # 10-minute observation window
            
            # Check error rate
            error_rate=$(gcloud monitoring metrics list \
              --filter="metric.type=run.googleapis.com/request_count AND resource.labels.service_name=pharma-pipeline-backend-prod" \
              --format="get(points.value)" | awk '{if($1>0.001) exit 1}')
            
            if [ $? -eq 0 ]; then
              gcloud run services update-traffic pharma-pipeline-backend-prod \
                --region=${{ env.GCP_REGION }} \
                --to-tags=prod-${{ needs.prepare-deployment.outputs.image_tag }}=$percentage
            else
              echo "Error rate threshold exceeded. Initiating rollback."
              gcloud run services update-traffic pharma-pipeline-backend-prod \
                --region=${{ env.GCP_REGION }} \
                --to-revisions=PREVIOUS=100
              exit 1
            fi
          done

      - name: Verify Final Deployment
        run: |
          gcloud run services describe pharma-pipeline-backend-prod \
            --region=${{ env.GCP_REGION }} \
            --format='get(status.conditions[0].status)'

      - name: Update Monitoring Alerts
        if: success()
        run: |
          gcloud monitoring alerts create \
            --display-name="Production Deployment Alert" \
            --condition="metric.type=run.googleapis.com/request_count resource.type=cloud_run_revision" \
            --duration=5m \
            --alert-on=above \
            --threshold=0.001 \
            --notification-channels="CD Pipeline Alerts"

  notify:
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Deployment Status
        uses: actions/github-script@v6
        with:
          script: |
            const deployStatus = context.job.status === 'success' ? '✅ Success' : '❌ Failure';
            const environment = '${{ needs.prepare-deployment.outputs.deploy_environment }}';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Deployment to ${environment} status: ${deployStatus}`
            });